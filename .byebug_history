c
UserRole::ROLE_HASH[user_role.role] == role_name
c
UserRole::ROLE_HASH[user_role.role] == role_name
UserRole::ROLE_HASH[user_role.role]
UserRole::ROLE_HASH[user_role.role] == role_name.upcase
c
current_user.is_normal_user?
c
UserRole::ROLE_HASH[3] == :normal_user
UserRole::ROLE_HASH[3]
UserRole::ROLE_HASH[:normal_user]
UserRole::ROLE_HASH[:normal_user] == :normal_user
UserRole::ROLE_HASH.class
UserRole::ROLE_HASH
UserRole::ROLE_HASH["normal_user"]
UserRole::ROLE_HASH["normal_useR"]
UserRole::ROLE_HASH[user_role.title]
[user_role.title] == role_name.upcase
[user_role.title]
"is_#{role_name}?"
role_name.upcase
role_name
c
current_user
current_user.is_normal_user?
c
current_user
current_user.is_normal_user?
current_usercurrent_user.is_normal_user?
c
current_user.is_normal_user?
current_user
c
current_user.is_moderator?
current_user.is_admin?
current_user.user_role
current_user
current_user.is_normal_user?
!current_user.is_normal_user?
@blog.blog_owner?(current_user)
c
current_user.user_role
current_user.is_normal_user?
!current_user.is_normal_user?
@blog.blog_owner?(current_user)
current_user
c
n
user_params
user_rolw
user_rol
c
UserRole::ROLE_HASH
user_params
c
@user.update(user_role_id: 3)
@user.user_role
@user.update(user_role_id: 2)
@user.update(about_user: "Rockstar personality")
@user
user_params
c
User.find(16)
@user.update(user_role_id: 2)
 @user.update(user_params)
user_params
c
n
user_params
c
params[:action].to_yaml
params[:action].methods
params[:action].class
params[:action]
errors
params.class
params[:controller]
params
c
user_signed_in?
c
User.find(4)
c
session[:user_id]
c
render 'user_blog_index'
current_user
c
n
user_params
c
act_cont.activity_content.values[0][1]
act_cont.activity_content.keys
act_cont.activity_content.values[0][0]
c
n
 n
n
act_cont.activity_content
act_cont.activity_content.values[0][0]
n
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0][0]
n
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0][0]
c
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0]
act_cont.activity_content.values[1]
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0][0]
act_cont.activity_content.values[0]
act_cont.activity_content.values
c
n
c
n
c
n
c
activity
n
c
TrackActivity.create(activity_column: changes.keys , activity_content: changes, activity_id: id)
changes.keys
c
n
c
changes.keys.to_s.class
changes.keys.to_s
changes.keys.class
changes.keys
changes
changes.keys.to_s
TrackActivity
activity_column
changes.keys
c
n
c
id
changes
s
n
c
n
c
n
c
id
self.class
class
c
activities.create(activity_name: self.class , user_activity_id: self.id, user_activity_type: "destroy", user_id: user.id)
self.id
self.class
self
c
current_user
self
c
n
c
 changes.keys
 changes.keys.flatten.to_s
 changes.keys.flatten
 changes.keys
 changes.keys.to_s
 changes.keys[0]
 changes.keys
c
changes.keys[0]
changes.keys.to_s
changes.keys
changes
c
n
c
n
user_authorized?
n
c
@blog.changes
n
c
current_user.user_role.role == 1
n
current_user.user_role.role == 2
s
user_authorized?
n
c
user_authorized?
n
@blog
blog_params
@blog.assign_attributes(blog_params)
c
@blog.changes.values[0]
@blog.changes.values
@blog.changes.values.flatten
@blog.changes.values.flatteb
@blog.changes.values
@blog.changes.class
@blog.changes.keys
@blog.changes
n
blog_params
c
 @blog.changes.values.flatten
 @blog.changes.values.class
 @blog.changes.values
 @blog.changes.value
 @blog.changes.keys
 @blog.changes.class
blog_params
 @blog.changes
 @blog.changed
n
c
n
user_authorized?
@blog.changed.class
@blog.changed
@blog.previous_changes
changes
n
@blog.body
@blog
n
@blog.body
@blog
c
n
changes
n
c
n
@blog.save!
@blog.previous_changes
changes
@blog.previous_changes
changes
n
current_user.user_role.role == 2
s
changes
n
@blog.previous_changes.delete(:updated_at)
n
c
current_user.user_role.role == 2
s
user_authorized?
