c
value.each do |a,b| puts "#{a} -- #{b}" end
value.each do |a,b| puts "#{a
value
c
n
value.is_a?(Array)
value.is_a?(Hash)
value
v
k
value
n
c
value.is_a?(Hash)
n
c
Activity.user_activities.class
Activity.user_activities
n
key
key,value
Activity.user_activities.each do |key,value|
c
activities_array.values.each { |k,v| value = v || k ; if value.is_a?(Hash) || value.is_a?(Array) ; puts "#{value}" } end
activities_array.values.each do |k,v| value = v || k if value.is_a?(Hash) || value.is_a?(Array) puts "#{value}" end end
activities_array.values
activities_array.values.flatten
activities_array.values[0]
activities_array.values.class
activities_array.values.each do |k,v| puts "#{k} -- #{v}" end
activities_array.values
activities_array.each do |key,value| puts "#{key} -- #{value}" end
activities_array.values
activities_array.keys
activities_array
activities_array[0]
activities_array.each do |key,value| 
activities_array.each do |key,value|
activities_array = Activity.user_activities
Activity.user_activities
value.class
value
n
user
c
n
value
user
c
Activity.user_activities.each do |act| act.each_with_index end
Activity.user_activities.each do |act| puts act end
value.each_with_index do |user, index| do if index > 0 puts "name - #{user}" else puts "activity #{user}" end end
value
value,
c
value[:approved]
n
index
c
n
value
n
user_activity
c
Activity.user_activities.map do |user| user.each_with_index { |val, index| puts "#{val} - #{index}"} end
Array.methods
Activity.user_activities.map do |user| puts "#{user} + '~~~~~'" end
Activity.user_activities.map do |user| puts user + '~~~~~' end
Activity.user_activities.map do |user| puts user.class end
Activity.user_activities.map do |user| puts user[:approved] end
Activity.user_activities.map do |user| puts user.approved end
Activity.user_activities.map do |user| puts user end
Activity.user_activities.each do |user| puts user end
Activity.user_activities.each do |user|
c
act.each do |a| puts a end
act.each do |a|
act.class
act = Activity.user_activities
Activity.user_activities
c
n
s
n
s
Activity.user_activities
c
n
s
Activity.unapproved_activity
n
Activity.unapproved_activity
Activity.approved_activity
c
Activity.unapproved_activity
Activity.approved_activity
c
Activity.approved_activity
c
n
User.find(id).activities
n
activity
n
c
Activity.approved_activity
c
s
Activity.approved_activity
c
Activity.approved_activity
c
activities[1]
activities[0]
activities.class
activities
activities = Activity.user_activities
activities
Activity.user_activities
c
UserRole::ROLE_HASH[user_role.role] == role_name
c
UserRole::ROLE_HASH[user_role.role] == role_name
UserRole::ROLE_HASH[user_role.role]
UserRole::ROLE_HASH[user_role.role] == role_name.upcase
c
current_user.is_normal_user?
c
UserRole::ROLE_HASH[3] == :normal_user
UserRole::ROLE_HASH[3]
UserRole::ROLE_HASH[:normal_user]
UserRole::ROLE_HASH[:normal_user] == :normal_user
UserRole::ROLE_HASH.class
UserRole::ROLE_HASH
UserRole::ROLE_HASH["normal_user"]
UserRole::ROLE_HASH["normal_useR"]
UserRole::ROLE_HASH[user_role.title]
[user_role.title] == role_name.upcase
[user_role.title]
"is_#{role_name}?"
role_name.upcase
role_name
c
current_user
current_user.is_normal_user?
c
current_user
current_user.is_normal_user?
current_usercurrent_user.is_normal_user?
c
current_user.is_normal_user?
current_user
c
current_user.is_moderator?
current_user.is_admin?
current_user.user_role
current_user
current_user.is_normal_user?
!current_user.is_normal_user?
@blog.blog_owner?(current_user)
c
current_user.user_role
current_user.is_normal_user?
!current_user.is_normal_user?
@blog.blog_owner?(current_user)
current_user
c
n
user_params
user_rolw
user_rol
c
UserRole::ROLE_HASH
user_params
c
@user.update(user_role_id: 3)
@user.user_role
@user.update(user_role_id: 2)
@user.update(about_user: "Rockstar personality")
@user
user_params
c
User.find(16)
@user.update(user_role_id: 2)
 @user.update(user_params)
user_params
c
n
user_params
c
params[:action].to_yaml
params[:action].methods
params[:action].class
params[:action]
errors
params.class
params[:controller]
params
c
user_signed_in?
c
User.find(4)
c
session[:user_id]
c
render 'user_blog_index'
current_user
c
n
user_params
c
act_cont.activity_content.values[0][1]
act_cont.activity_content.keys
act_cont.activity_content.values[0][0]
c
n
 n
n
act_cont.activity_content
act_cont.activity_content.values[0][0]
n
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0][0]
n
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0][0]
c
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0]
act_cont.activity_content.values[1]
act_cont.activity_content.values[0][1]
act_cont.activity_content.values[0][0]
act_cont.activity_content.values[0]
act_cont.activity_content.values
c
n
c
n
c
n
c
activity
n
c
TrackActivity.create(activity_column: changes.keys , activity_content: changes, activity_id: id)
changes.keys
c
n
c
changes.keys.to_s.class
changes.keys.to_s
changes.keys.class
changes.keys
changes
changes.keys.to_s
