c
TrackActivity.create(activity_column: changes.keys , activity_content: changes, activity_id: id)
changes.keys
c
n
c
changes.keys.to_s.class
changes.keys.to_s
changes.keys.class
changes.keys
changes
changes.keys.to_s
TrackActivity
activity_column
changes.keys
c
n
c
id
changes
s
n
c
n
c
n
c
id
self.class
class
c
activities.create(activity_name: self.class , user_activity_id: self.id, user_activity_type: "destroy", user_id: user.id)
self.id
self.class
self
c
current_user
self
c
n
c
 changes.keys
 changes.keys.flatten.to_s
 changes.keys.flatten
 changes.keys
 changes.keys.to_s
 changes.keys[0]
 changes.keys
c
changes.keys[0]
changes.keys.to_s
changes.keys
changes
c
n
c
n
user_authorized?
n
c
@blog.changes
n
c
current_user.user_role.role == 1
n
current_user.user_role.role == 2
s
user_authorized?
n
c
user_authorized?
n
@blog
blog_params
@blog.assign_attributes(blog_params)
c
@blog.changes.values[0]
@blog.changes.values
@blog.changes.values.flatten
@blog.changes.values.flatteb
@blog.changes.values
@blog.changes.class
@blog.changes.keys
@blog.changes
n
blog_params
c
 @blog.changes.values.flatten
 @blog.changes.values.class
 @blog.changes.values
 @blog.changes.value
 @blog.changes.keys
 @blog.changes.class
blog_params
 @blog.changes
 @blog.changed
n
c
n
user_authorized?
@blog.changed.class
@blog.changed
@blog.previous_changes
changes
n
@blog.body
@blog
n
@blog.body
@blog
c
n
changes
n
c
n
@blog.save!
@blog.previous_changes
changes
@blog.previous_changes
changes
n
current_user.user_role.role == 2
s
changes
n
@blog.previous_changes.delete(:updated_at)
n
c
current_user.user_role.role == 2
s
user_authorized?
changes
n
@blog.previous_changes
@blog.previous_changes.delete(:updated_at)
@blog.previous_changes.methods
@blog.previous_changes.keys
@blog.previous_changes
n
c
user_authorized?
@blog.previous_changes.keys.class
@blog.previous_changes.keys.array
@blog.previous_changes.keys
@blog.previous_changes..keys
@blog.previous_changes.class
@blog.changed?
@blog.previous_changes
@blog.changed_attributes
n
b
@blog.changed_attributes
@blog.previous_changes
@blog.changed?
@blog.previous_changes?
@blog.changed
c
self.body
self
seldf
changed
n
@blog.changed
c
changed
n
c
n
@blog
@blog.body_changed?
c
current_user.user_role.role == 2
if current_user.user_role.role == 2
c
n
s
@blog.changed
@blog
c
self
body
changed
changed_attributes.class
changed_attributes
changed_attribute
changes.class
changes
changed?
body_changed?
self
seld
c
@blog.body_changed?
@blog
self
blog_params[:body].changed?
blog_params[:body]
blog_params
params
@blog.changed?
c
n
self
c
n
self
c
n
cn
c
n
c
user.id
user
self.id
self
MODELNAME
c
self.model_name
self.model_name.name
c
activities
c
"create_activity_for_#{activities[1].downcase}_#{activities[0]}"
"create_activity_for_#{activities[1].downcase}_#{activities[0]"
create_activity_for_#{activities[1].downcase}_#{activities[0]
activities[1].downcase
c
activities[2].id
activities[3].id
activities[3]
activities
c
self.model_name.name
self.model_name
c
activities[1].name
activities[1]
activities
c
argument[1]
activities[0]
activities
c
define_method("create_activity_for_#{activities[1]}") do puts "hello" end
define_method("create_activity_for_#{activities[1]}")
activities
activities.length-1
activities.length
Activities.length
 activities.each do |activity| puts "create_activity_for_#{activity}" end
 activities.each do |activity| puts activity end
activities.each {|a| puts a}
n
c
