c
n
c
n
self
n
c
previous_changes
changes
self
n
c
Activity.last
n
c
self.update(activity_name: activity, user_id: argument.id)
self.create(activity_name: activity, user_id: argument.id)
self
n
c
n
current_user
s
@activity
c
n
activity_content: changes
changes
{user_activity_type: activity.user_activity_type}
activity_content: {user_activity_type: activity.user_activity_type}
c
n
c
n
activity.user_activity_type
activity
c
n
c
n
s
"#{activity.user_activity_type} + '' + #{activity.activity_name}"
activity.user_activity_type
activity
n
current_user
n
c
current_user
c
n
c
n
c
Activity.user_activities
n
c
n
c
n
TrackActivity.last
n
activity.user_activity_type
n
c
changed?
previous_changes
changes
n
c
n
c
n
current_user.is_moderator?
c
n
c
n
c
current_user.blog_owner?(current_user)
current_user
c
!current_user.is_normal_user?
current_user.is_admin?
@blog.blog_owner?(current_user)
@blog.blog_owner?
@blog
s
c
value.delete_if {|a,b| b.blank? }
value.values.compact
value.values
value.keys
value
n
value
n
value
n
value
n
value
c
Activity.user_activities.values.compact
Hash.methods
Activity.user_activities.values
Activity.user_activities.keys
Activity.user_activities
value
c
value.each do |a,b| puts "#{a} -- #{b}" end
value.each do |a,b| puts "#{a
value
c
n
value.is_a?(Array)
value.is_a?(Hash)
value
v
k
value
n
c
value.is_a?(Hash)
n
c
Activity.user_activities.class
Activity.user_activities
n
key
key,value
Activity.user_activities.each do |key,value|
c
activities_array.values.each { |k,v| value = v || k ; if value.is_a?(Hash) || value.is_a?(Array) ; puts "#{value}" } end
activities_array.values.each do |k,v| value = v || k if value.is_a?(Hash) || value.is_a?(Array) puts "#{value}" end end
activities_array.values
activities_array.values.flatten
activities_array.values[0]
activities_array.values.class
activities_array.values.each do |k,v| puts "#{k} -- #{v}" end
activities_array.values
activities_array.each do |key,value| puts "#{key} -- #{value}" end
activities_array.values
activities_array.keys
activities_array
activities_array[0]
activities_array.each do |key,value| 
activities_array.each do |key,value|
activities_array = Activity.user_activities
Activity.user_activities
value.class
value
n
user
c
n
value
user
c
Activity.user_activities.each do |act| act.each_with_index end
Activity.user_activities.each do |act| puts act end
value.each_with_index do |user, index| do if index > 0 puts "name - #{user}" else puts "activity #{user}" end end
value
value,
c
value[:approved]
n
index
c
n
value
n
user_activity
c
Activity.user_activities.map do |user| user.each_with_index { |val, index| puts "#{val} - #{index}"} end
Array.methods
Activity.user_activities.map do |user| puts "#{user} + '~~~~~'" end
Activity.user_activities.map do |user| puts user + '~~~~~' end
Activity.user_activities.map do |user| puts user.class end
Activity.user_activities.map do |user| puts user[:approved] end
Activity.user_activities.map do |user| puts user.approved end
Activity.user_activities.map do |user| puts user end
Activity.user_activities.each do |user| puts user end
Activity.user_activities.each do |user|
c
act.each do |a| puts a end
act.each do |a|
act.class
act = Activity.user_activities
Activity.user_activities
c
n
s
n
s
Activity.user_activities
c
n
s
Activity.unapproved_activity
n
Activity.unapproved_activity
Activity.approved_activity
c
Activity.unapproved_activity
Activity.approved_activity
c
Activity.approved_activity
c
n
User.find(id).activities
n
activity
n
c
Activity.approved_activity
c
s
Activity.approved_activity
c
Activity.approved_activity
c
activities[1]
activities[0]
activities.class
activities
activities = Activity.user_activities
activities
Activity.user_activities
c
UserRole::ROLE_HASH[user_role.role] == role_name
c
UserRole::ROLE_HASH[user_role.role] == role_name
UserRole::ROLE_HASH[user_role.role]
UserRole::ROLE_HASH[user_role.role] == role_name.upcase
c
current_user.is_normal_user?
c
UserRole::ROLE_HASH[3] == :normal_user
UserRole::ROLE_HASH[3]
UserRole::ROLE_HASH[:normal_user]
UserRole::ROLE_HASH[:normal_user] == :normal_user
UserRole::ROLE_HASH.class
UserRole::ROLE_HASH
UserRole::ROLE_HASH["normal_user"]
UserRole::ROLE_HASH["normal_useR"]
UserRole::ROLE_HASH[user_role.title]
[user_role.title] == role_name.upcase
[user_role.title]
"is_#{role_name}?"
role_name.upcase
role_name
c
current_user
current_user.is_normal_user?
c
